name: MacOS Tests
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: macos-latest
    env:
      GNOSIS_RPC_URL: ${{ secrets.GNOSIS_RPC_URL }}
      MODIUS_RPC_URL: ${{ secrets.MODIUS_RPC_URL }}
      OPTIMISM_RPC_URL: ${{ secrets.OPTIMISM_RPC_URL }}
      BASE_RPC_URL: ${{ secrets.BASE_RPC_URL }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      DOCKER_LOGS_DIR: ${GITHUB_WORKSPACE}/logs
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Set up Docker
      run: |
        brew install docker
        brew install colima
        colima start
        
    - name: Install system dependencies
      run: brew install git
        
    - name: Clean Python cache
      run: |
        rm -rf ~/.cache/pip
        rm -rf ~/.cache/poetry
        rm -rf .pytest_cache
        rm -rf .venv
        rm -rf poetry.lock
        
    - name: Install Poetry
      run: curl -sSL https://install.python-poetry.org | python3 -
        
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
    - name: Create .env file
      run: |
        echo "GNOSIS_RPC_URL=${GNOSIS_RPC_URL}" > .env
        echo "MODIUS_RPC_URL=${MODIUS_RPC_URL}" >> .env
        echo "OPTIMISM_RPC_URL=${OPTIMISM_RPC_URL}" >> .env
        echo "BASE_RPC_URL=${BASE_RPC_URL}" >> .env
        echo "TEST_PASSWORD=${TEST_PASSWORD}" >> .env
        echo "DOCKER_LOGS_DIR=${DOCKER_LOGS_DIR}" >> .env
        
    - name: Install project dependencies
      run: |
        python -m pip install --upgrade pip
        poetry env use python3.10
        poetry install --no-interaction

    - name: Run tests
      run: poetry run pytest -v tests/test_run_service.py -s --log-cli-level=DEBUG

    - name: Debug container failure
      if: failure()
      run: |
        echo "==== Docker container status ===="
        docker ps -a
        echo "==== Container logs ===="
        for container in $(docker ps -aq); do
          echo "=== Logs for $container ==="
          docker logs $container
          echo "=== Inspect for $container ==="
          docker inspect $container
        done

    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: macos-test-logs
        path: |
          logs/
          /logs/
          .env
        retention-days: 30